1. 
함수를 이용하여 ㅇ ㅣ ㅁ ㄹ ㅡ ㄱ 각각 자음 모음을 따로 만들었습니다.
또한 그리는 위치를 옮겨주는 함수도 만들어서 수행하고자 하는 것을 함수를 이용하여 만들었습니다.


3.
프로그래밍에서 함수란 어떤 특정한 일을 처리하는 기능을 모아놓은 것입니다. 일반적으로 라이브러리, 모듈은 여러 개의 함수들로 구성되어있습니다.
보통 함수의 이름을 지을 때 그 함수의 기능을 정확하게 나타내는 것이 좋습니다. 함수 정의 함으로써 여러개의 겹치는 코드를 하나의 함수에 담아
코드 중복을 회피할 수 있으며, 동작을 추상화할 수 있습니다.
파이썬에서 함수는
def 함수명(매개변수):
     <수행할 문장>
     .....
이런 형식입니다.
과제 1번에서 적용한 함수를 예를 들자면
def Move_To(x, y):
     t.penup()
     t.goto(x, y)
     t.pendown()
에서 함수의 기능이 어떤 것인지 알려주기 위해 이동한다라는 의미로 Move_To라고 함수명을 지었습니다.
또한 가고자 하는 위치 (x, y)를 매개변수로 받아 함수 안에서 t.goto(x, y)를 수행하게끔 하였습니다.


4.
재귀는 자신을 정의 할 때 자기 자신을 재 참조하는 방법을 뜻하고, 이를 프로그래밍에 적용해 재귀 호출의 형태로 많이 사용됩닏나.
재귀함수 호출이란 함수 내부에서 함수가 자기 자신을 또다시 호출하는 행위를 의미합니다.
이러한 재귀 호출은 자기가 자신을 계속해서 호출하기 때문에 끝없이 반복하게 됩니다.
따라서 재귀 함수를 작성할 때는 함수 내에서 다신 자신을 호출한 후 그 함수가 끝날 때까지 함수 호출 이후의 명령문이
수행되지 않는다는 사실과 종료 조건이 꼭 포함되어야 한다는 부분을 인지하고 작성해야 무한 루프를 방지할 수 있습니다.
-python 에서 활용 예
def hello():
     print("Hello, world!")
     hello()
hello()
-> hello() 함수가 실행되면 print("Hello, world!")를 수행하고 그 후 hello()함수를 다시 또 실행합니다.
    결과적으로 계속해서 hello() 함수를 반복해서 수행하게 되다가 에러가 발생합니다.
    에러가 발생하는 이유는 파이썬에서는 최대 재귀 깊이가 1000으로 정해져 있어 그 깊이를 초과하면 에러가 발생합ㄴ디ㅏ.
따라서 보통 재귀함수를 사용하는 경우 종료 조건을 지정합니다.
def hello(count):
     if count == 0:
         return
     print("Hello, world!", count)
     
     count -= 1
     hello(count)
hello(5)
-> 이 경우 count = 5 이므로 hello(5), hello(4), hello(3), hello(2), hello(1), hello(0)..... 이렇게 호출하게 되는데
    hello(0)에서 count = 0 인경우 return이므로 함수를 빠져나오게 되어 더이상 재귀 호출을 하지 않게됩니다.  


5.
fractal이란 작은 구조가 전체 구조와 비슷한 형태로 끝없이 되풀이 되는 구조를 말합니다.
즉, fractal은 부분과 전체가 똑같은 모양을 하고 있다는 자기 유사성의 개념을 기하학적으로 푼 것으로
단순한 구조가 끊임없이 반복되면서 복잡하고 묘한 전체 구조를 만드는 것입니다.
fractal의 속성은 자기 유사성과 순환성입니다.
자연계의 리아스식 해안선, 동물혈관 분포형태, 나뭇가지 모양, 창문에 성에가 자라는 모습, 산맥의 모습도 프랙탈이며
우주의 모든 것이 결국 프랙탈 구조로 되어있습니다.
따라서 fractal graphic은 프랙탈 구조의 그래픽입니다.
fractal graphic을 이용한 것이 turtle graphics 입니다.
turtle graphics는 교육용 모듈로 로고 프로그래밍 언어와 관련이 있습니다. turtle graphics의 아이디어는
fractal 생성을 위한 Lindenmayer 시스템에서 유용합니다.
turtle graphics 모듈을 이용하여 fractal을 표현할 수 있습니다. 