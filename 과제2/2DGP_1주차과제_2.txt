1. git은 Roger Dudler가 만들었으며 원격 저장소 입니다. 로컬 저장소에 있는 것들을 원격 저장소에 저장합니다.
git은 크게 세가지 흐름으로 나뉩니다. 작업 디렉토리는 실제 파일들로 이루어져 있고, 인덱스는 준비 영역의 역할을 하며, Head는 최종 확정본인 commit을 나타냅니다. commit을 하면 변경된것들이 Head에 반영이 되지만 원격 저장소에는 갱신이 안됩니다.
원격 저장소에 갱신을 할려면 push를 통해 원격 서버로 내용을 보냅니다. 사용 방법에는 먼저 git을 지원하는 서비스 프로그램인 github를 다운받아줍니다. github는 두 가지 방식으로 git을 더 편리하게 해줍니다.
github 소프트웨어를 다운로드 하면 로컬에서 나의 프로젝트를 관리할 수 있게하는 비주얼 인터페이스를 제공하고 github 사이트에 계정을 생성하면 웹에서 관리도 가능하며 평가측정 등 소셜 네트워크의 기능을 사용할 수 있습니다.
이를 통해 저장소가 public인 경우 다른 github 사용자의 프로젝트를 둘러볼 수 있고 복사하여 참고도 가능합니다. 또한 에러가 있는 부분을 발견하면 해결책을 제안할 수도 있습니니다.
github의 특징으로는 저장소에 팀원 초대는 무제한이고 개인 저장소는 유로입니다. 또한 Pull->Pull Request 형식입니다. github 계정을 만들어주고 Repository를 만들어줍니다. 그 저장소에 계속해서 업데이트 함으로써 원격 저장소에 갱신됩니다.
git은 다른사람과 공유했을 때 서로 동시에 수정이 가능하며 겹쳐져 둘중 하나의 데이터가 지워지지 않습니다. 다양한 명령어들을 통해 처리작업을 할 수 있습니다. 언제든지 git clone 명령어를 이용하여 로컬저장소나 원격 저장소에 다운받을 수 있습니다.
git의 기본 용어로는 커맨트 라인, 저장소, 버전관리, 커밋, 브랜치가 있습니다. 커맨트 라인은 명령어를 입력할 때 사용하는 프로그램(터미널)이라고 합니다. 저장소는 프로젝트가 생성될 수 있는 디렉토리나 저장공간을 의미합니다.
버전관리는 기본적으로 git이 서비스 되도록 고안된 목적, MS 워드 작업할 때, 저장하면 이전 화일 위에 겹쳐쓰거나 여러 버전으로 나누어 저장합니다. 이것 때문에 다른 사람들과 동시에 작업이 가능합니다. 커밋은 git에게 파워를 주는 명령입니다.
브랜치는 여러 명이 하나의 프로젝트를 진행하는 과정에서 안전하게 겹치지 않도록 따로 빼놨다가 완료되면 다시 병합해주는 것입니다

2. IDLE 코드 기록
>>> 10+20
30
>>> 1111 / 5
222.2
>>> 1111 // 5
222
>>> 5 % 1
0
>>> 5 % 5.2
5.0
>>> pi = 3.14159265358979
>>> r1 = 3
>>> area = pi * r1 * r1
>>> area
28.274333882308113
>>> str = "2DGP"
>>> print(str)
2DGP
>>> type(str)
<class 'str'>
>>> type(pi)
<class 'float'>
>>> 1<0
False
>>> first = "MiReuk"
>>> last = "Lee"
>>> first + last
'MiReukLee'
>>> first + " " + last
'MiReuk Lee'
>>> name = first + " " + last
>>> name
'MiReuk Lee'
>>> name[99]
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    name[99]
IndexError: string index out of range
>>> name[1]
'i'
>>> friends = { 'kim' : 22, 'lee' : 24, 'park' : 27}
>>> type(friends)
<class 'dict'>
>>> friends
{'kim': 22, 'lee': 24, 'park': 27}
>>> friends['park']
27
>>> friends['lim'] = 21
>>> friends
{'kim': 22, 'lee': 24, 'park': 27, 'lim': 21}
>>> 'lim' in friends
True
>>> friends.clear()
>>> friends
{}
>>> t1 = (1,2,3)
>>> t1
(1, 2, 3)
>>> t2 = (1,2,)
>>> t2
(1, 2)
>>> t3 = 1,2,3,4
>>> type(t1)
<class 'tuple'>
>>> type(t2)
<class 'tuple'>
>>> type(t3)
<class 'tuple'>
>>> t3 * 3
(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
>>> s1 = {1,2,3,4}
>>> type(s1)
<class 'set'>
>>> s2 = {1,1,1,2,2,2,3,3,3}
>>> s2
{1, 2, 3}
>>> s1 + s2
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    s1 + s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1 | s2
{1, 2, 3, 4}
>>> s1 & s2
{1, 2, 3}
>>> s3 = {6,5,4}
>>> s2 & s3
set()
>>> s1 & s3
{4}
>>> s3.add(10)
>>> s3
{10, 4, 5, 6}
>>> s3.remove(4)
>>> s3
{10, 5, 6}
-  python이 인터프리터 언어라서 확실히 한줄 한줄 틀릴 때마다 오류를 띄워주고 있습니다. c언어나 c++언어와 달리 간결하고 형식이나 타입에 있어서 자유롭다는 느낌을 받았습니다. 다른 언어보다 쉽게 다가갈수 있을것 같습니다.